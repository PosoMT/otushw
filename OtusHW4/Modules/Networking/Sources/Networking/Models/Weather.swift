//
// V1CurrentJsonGet200ResponseCurrent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Weather: Codable, JSONEncodable, Hashable {

    public var feelslikeC: Double?
    public var uv: Double?
    public var lastUpdated: String?
    public var feelslikeF: Double?
    public var windDegree: Int?
    public var lastUpdatedEpoch: Int?
    public var isDay: Int?
    public var precipIn: Double?
    public var windDir: String?
    public var gustMph: Double?
    public var tempC: Double?
    public var pressureIn: Double?
    public var gustKph: Double?
    public var tempF: Double?
    public var precipMm: Double?
    public var cloud: Int?
    public var windKph: Double?
    public var condition: V1CurrentJsonGet200ResponseCurrentCondition?
    public var windMph: Double?
    public var visKm: Double?
    public var humidity: Int?
    public var pressureMb: Double?
    public var visMiles: Double?

    public init(feelslikeC: Double? = nil, uv: Double? = nil, lastUpdated: String? = nil, feelslikeF: Double? = nil, windDegree: Int? = nil, lastUpdatedEpoch: Int? = nil, isDay: Int? = nil, precipIn: Double? = nil, windDir: String? = nil, gustMph: Double? = nil, tempC: Double? = nil, pressureIn: Double? = nil, gustKph: Double? = nil, tempF: Double? = nil, precipMm: Double? = nil, cloud: Int? = nil, windKph: Double? = nil, condition: V1CurrentJsonGet200ResponseCurrentCondition? = nil, windMph: Double? = nil, visKm: Double? = nil, humidity: Int? = nil, pressureMb: Double? = nil, visMiles: Double? = nil) {
        self.feelslikeC = feelslikeC
        self.uv = uv
        self.lastUpdated = lastUpdated
        self.feelslikeF = feelslikeF
        self.windDegree = windDegree
        self.lastUpdatedEpoch = lastUpdatedEpoch
        self.isDay = isDay
        self.precipIn = precipIn
        self.windDir = windDir
        self.gustMph = gustMph
        self.tempC = tempC
        self.pressureIn = pressureIn
        self.gustKph = gustKph
        self.tempF = tempF
        self.precipMm = precipMm
        self.cloud = cloud
        self.windKph = windKph
        self.condition = condition
        self.windMph = windMph
        self.visKm = visKm
        self.humidity = humidity
        self.pressureMb = pressureMb
        self.visMiles = visMiles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case feelslikeC = "feelslike_c"
        case uv
        case lastUpdated = "last_updated"
        case feelslikeF = "feelslike_f"
        case windDegree = "wind_degree"
        case lastUpdatedEpoch = "last_updated_epoch"
        case isDay = "is_day"
        case precipIn = "precip_in"
        case windDir = "wind_dir"
        case gustMph = "gust_mph"
        case tempC = "temp_c"
        case pressureIn = "pressure_in"
        case gustKph = "gust_kph"
        case tempF = "temp_f"
        case precipMm = "precip_mm"
        case cloud
        case windKph = "wind_kph"
        case condition
        case windMph = "wind_mph"
        case visKm = "vis_km"
        case humidity
        case pressureMb = "pressure_mb"
        case visMiles = "vis_miles"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(feelslikeC, forKey: .feelslikeC)
        try container.encodeIfPresent(uv, forKey: .uv)
        try container.encodeIfPresent(lastUpdated, forKey: .lastUpdated)
        try container.encodeIfPresent(feelslikeF, forKey: .feelslikeF)
        try container.encodeIfPresent(windDegree, forKey: .windDegree)
        try container.encodeIfPresent(lastUpdatedEpoch, forKey: .lastUpdatedEpoch)
        try container.encodeIfPresent(isDay, forKey: .isDay)
        try container.encodeIfPresent(precipIn, forKey: .precipIn)
        try container.encodeIfPresent(windDir, forKey: .windDir)
        try container.encodeIfPresent(gustMph, forKey: .gustMph)
        try container.encodeIfPresent(tempC, forKey: .tempC)
        try container.encodeIfPresent(pressureIn, forKey: .pressureIn)
        try container.encodeIfPresent(gustKph, forKey: .gustKph)
        try container.encodeIfPresent(tempF, forKey: .tempF)
        try container.encodeIfPresent(precipMm, forKey: .precipMm)
        try container.encodeIfPresent(cloud, forKey: .cloud)
        try container.encodeIfPresent(windKph, forKey: .windKph)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encodeIfPresent(windMph, forKey: .windMph)
        try container.encodeIfPresent(visKm, forKey: .visKm)
        try container.encodeIfPresent(humidity, forKey: .humidity)
        try container.encodeIfPresent(pressureMb, forKey: .pressureMb)
        try container.encodeIfPresent(visMiles, forKey: .visMiles)
    }
}

